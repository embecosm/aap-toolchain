# AAP specific site.exp

# Copyright (C) 2014 Embecosm Limited.
# Contributor Jeremy Bennett <jeremy.bennett@embecosm.com>

# This file is part of the Embecosm LLVM build system for AAP.

# This file is distributed under the University of Illinois Open Source
# License. See COPYING for details.

#------------------------------------------------------------------------------

# Explicitly set the target.
set target_triplet aap-unknown-elf
set target_alias aap

# Make sure we look in the right place for the board description files. Add
# our local boards directories
if ![info exists boards_dir] {
    lappend boards_dir "[file dirname $env(DEJAGNU)]/dejagnu"
    lappend boards_dir "[file dirname $env(DEJAGNU)]/dejagnu/baseboards"
} else {
    set boards_dir "[file dirname $env(DEJAGNU)]/dejagnu"
    lappend boards_dir "[file dirname $env(DEJAGNU)]/dejagnu/baseboards"
}

# $target_list is set by the --target_board option. If it is not set, then we
# should use $target_triplet to set a single target board in ${target_list}.
global target_list

case "$target_triplet" in {

    { "aap-*-*" } {
	if {! [info exists target_list]} {
	    set target_list { "aap-run" }
	}
    }

    default {
	# Any other triplet is an error.
	error "Unknown target $target_triplet in site.exp."
    }
}

# Read in the list of tests that try to examine the compiler's messages (e.g.
# warnings, errors, etc.). The list can be generated for a new GCC with the
# following:
#
# egrep "(dg-message|dg-warning|dg-error)" {g++,gcc}.dg/* -R | \
#     awk 'BEGIN { FS=":" } { print $1 }' | sort | uniq

set fp [open [file dirname $env(DEJAGNU)]/output-tests.txt]
set message_tests [read $fp]
close $fp

# Read in the list of tests that contain unsupported language constructs. List
# generated with:
#
# egrep "(asm goto|__builtin_)" {g++.dg,gcc.dg,gcc.c-torture}/* -R | \
#     awk 'BEGIN { FS=":" } { print $1 }' | sort | uniq 

set fp [open [file dirname $env(DEJAGNU)]/bad-language.txt]
set bad_language_tests [read $fp]
close $fp


# Any test using any of these flags should be marked UNSUPPORTED - they are
# not supported by LLVM / Clang.
set unsupported_flags {
    "-fgnu89-inline"
    "-funroll-all-loops"
    "-finline-functions"
    "-fmodulo-sched"
}

# List of flags compiled for the original override manifest
set eds_unsupported_flags {
    "-finput-charset=utf-8"
    "-flto"
    "-fallow-parameterless-variadic-functions"
    "-fcheck-pointer-bounds"
    "-fcompare-debug"
    "-fcond-mismatch"
    "-fcrossjumping"
    "-fcse-follow-jumps"
    "-fcx-fortran-rules"
    "-fcx-limited-range"
    "-fdbg-cnt=vect_loop:1"
    "-fdiagnostics-show-caret"
    "-fdirectives-only"
    "-fdump-ipa-all"
    "-fdump-ipa-all-graph"
    "-fdump-ipa-build_ssa_passes"
    "-fdump-ipa-cgraph"
    "-fdump-ipa-cp"
    "-fdump-ipa-free-inline-summary"
    "-fdump-ipa-icf"
    "-fdump-ipa-icf-details"
    "-fdump-ipa-inline"
    "-fdump-ipa-inline-details"
    "-fdump-ipa-profile_estimate-blocks-details"
    "-fdump-ipa-pure-const"
    "-fdump-passes"
    "-fdump-rtl-all-graph"
    "-fdump-rtl-ce1"
    "-fdump-rtl-combine"
    "-fdump-rtl-combine-all"
    "-fdump-rtl-cse1"
    "-fdump-rtl-dse1"
    "-fdump-rtl-expand"
    "-fdump-rtl-expand-details"
    "-fdump-rtl-hoist"
    "-fdump-rtl-ira"
    "-fdump-rtl-loop2_invariant"
    "-fdump-rtl-postreload-graph"
    "-fdump-rtl-shorten"
    "-fdump-rtl-sms"
    "-fdump-rtl-web"
    "-fdump-tree-alias"
    "-fdump-tree-alias-details"
    "-fdump-tree-alias-vops"
    "-fdump-tree-backprop-details"
    "-fdump-tree-ccp1"
    "-fdump-tree-ccp2"
    "-fdump-tree-cdce-details"
    "-fdump-tree-cddce1"
    "-fdump-tree-cddce2"
    "-fdump-tree-cfg"
    "-fdump-tree-ch2"
    "-fdump-tree-ch2-details"
    "-fdump-tree-cunroll-details"
    "-fdump-tree-cunrolli-details"
    "-fdump-tree-cunrolli-details=stderr"
    "-fdump-tree-dce2"
    "-fdump-tree-dce3"
    "-fdump-tree-dom2"
    "-fdump-tree-dom2-details"
    "-fdump-tree-dom2-details-blocks"
    "-fdump-tree-dom3"
    "-fdump-tree-dom3-details"
    "-fdump-tree-dse1"
    "-fdump-tree-dse1-details"
    "-fdump-tree-dse1-vops"
    "-fdump-tree-ealias"
    "-fdump-tree-ealias-details"
    "-fdump-tree-ealias-graph"
    "-fdump-tree-einline"
    "-fdump-tree-esra"
    "-fdump-tree-esra-details"
    "-fdump-tree-fab1"
    "-fdump-tree-fnsplit"
    "-fdump-tree-forwprop"
    "-fdump-tree-forwprop1"
    "-fdump-tree-forwprop1-details"
    "-fdump-tree-forwprop3"
    "-fdump-tree-fre1"
    "-fdump-tree-fre1-details"
    "-fdump-tree-fre1-stats"
    "-fdump-tree-gimple"
    "-fdump-tree-gimple-details-lineno"
    "-fdump-tree-ifcombine"
    "-fdump-tree-ifcvt"
    "-fdump-tree-ifcvt-details"
    "-fdump-tree-ifcvt-stats"
    "-fdump-tree-isolate-paths"
    "-fdump-tree-ivcanon-details"
    "-fdump-tree-ivopts"
    "-fdump-tree-ivopts-details"
    "-fdump-tree-ldist"
    "-fdump-tree-ldist-details"
    "-fdump-tree-lim2"
    "-fdump-tree-lim2-details"
    "-fdump-tree-local-pure-const1"
    "-fdump-tree-mergephi1"
    "-fdump-tree-mergephi2"
    "-fdump-tree-objsz1-details"
    "-fdump-tree-optimized"
    "-fdump-tree-optimized-blocks"
    "-fdump-tree-optimized-blocks-details"
    "-fdump-tree-optimized-graph"
    "-fdump-tree-optimized-lineno"
    "-fdump-tree-optimized-nouid"
    "-fdump-tree-optimized-raw"
    "-fdump-tree-original"
    "-fdump-tree-pcom-details"
    "-fdump-tree-phiopt1"
    "-fdump-tree-phiopt1-details"
    "-fdump-tree-phiprop-details"
    "-fdump-tree-pre"
    "-fdump-tree-pre-all"
    "-fdump-tree-pre-details"
    "-fdump-tree-pre-stats"
    "-fdump-tree-profile_estimate"
    "-fdump-tree-profile_estimate-details"
    "-fdump-tree-reassoc"
    "-fdump-tree-reassoc1"
    "-fdump-tree-reassoc1-details"
    "-fdump-tree-reassoc-details"
    "-fdump-tree-recip"
    "-fdump-tree-release_ssa"
    "-fdump-tree-sccp-details"
    "-fdump-tree-sccp-scev"
    "-fdump-tree-sink"
    "-fdump-tree-sink-details"
    "-fdump-tree-sink-stats"
    "-fdump-tree-slsr"
    "-fdump-tree-slsr-details"
    "-fdump-tree-ssa"
    "-fdump-tree-ssa-vops"
    "-fdump-tree-stdarg"
    "-fdump-tree-strlen"
    "-fdump-tree-switchconv"
    "-fdump-tree-switchconv-all"
    "-fdump-tree-tailc"
    "-fdump-tree-tailc-details"
    "-fdump-tree-tailr1-details"
    "-fdump-tree-uncprop-details"
    "-fdump-tree-unswitch-blocks"
    "-fdump-tree-unswitch-details"
    "-fdump-tree-vect-details"
    "-fdump-tree-vrp1"
    "-fdump-tree-vrp1-blocks-vops-details"
    "-fdump-tree-vrp1-details"
    "-fdump-tree-vrp1-nouid"
    "-fdump-tree-vrp1-stats"
    "-fdump-tree-vrp2"
    "-fdump-tree-vrp2-details"
    "-fdump-tree-vrp-details"
    "-fdump-tree-widening_mul"
    "-feliminate-dwarf2-dups"
    "-femit-struct-debug-baseonly"
    "-femit-struct-debug-detailed=any"
    "-femit-struct-debug-detailed=none"
    "-femit-struct-debug-detailed=sys"
    "-femit-struct-debug-reduced"
    "-fgnu-tm"
    "-fgraphite"
    "-fguess-branch-probability"
    "-fhoist-adjacent-loads"
    "-fif-conversion"
    "-findirect-inlining"
    "-finstrument-functions-exclude-file-list=instrument-3"
    "-finstrument-functions-exclude-function-list=fn"
    "-fipa-cp-clone"
    "-fipa-icf"
    "-fipa-pta"
    "-fipa-ra"
    "-fipa-sra"
    "-fipa-struct-reorg"
    "-fira-algorithm=priority"
    "-fisolate-erroneous-paths-attribute"
    "-fkeep-static-functions"
    "-fleading-underscore"
    "-flive-range-shrinkage"
    "-flto-partition=1to1"
    "-flto-partition=none"
    "-fmo-unroll-loops"
    "-fmove-loop-invariants"
    "-fno-abi-version=1"
    "-fno-checking"
    "-fno-dce"
    "-fno-dse"
    "-fno-early-inlining"
    "-fno-foobar"
    "-fno-forward-propagate"
    "-fno-guess-branch-probability"
    "-fno-if-conversion"
    "-fno-if-convert"
    "-fno-inline-atomics"
    "-fno-ipa-cp-alignment"
    "-fno-ipa-icf"
    "-fno-ipa-pure-const"
    "-fno-ipa-sra"
    "-fno-ira-share-save-slots"
    "-fno-ira-share-spill-slots"
    "-fno-merge-debug-strings"
    "-fno-move-loop-invariants"
    "-fnon-lvalue-assign"
    "-fno-semantic-interposition"
    "-fno-split-wide-types"
    "-fno-strict-volatile-bitfields"
    "-fno-toplevel-reorder"
    "-fno-tree-bit-ccp"
    "-fno-tree-ccp"
    "-fno-tree-ch"
    "-fno-tree-copy-prop"
    "-fno-tree-dominator-opts"
    "-fno-tree-dse"
    "-fno-tree-forwprop"
    "-fno-tree-fre"
    "-fno-tree-loop-distribute-patterns"
    "-fno-tree-loop-im"
    "-fno-tree-loop-ivcanon"
    "-fno-tree-loop-optimize"
    "-fno-tree-pre"
    "-fno-tree-pta"
    "-fno-tree-sra"
    "-fno-tree-switch-conversion"
    "-fno-tree-tail-merge"
    "-fopenacc"
    "-fopenmp-simd"
    "-fopt-diary"
    "-fopt-info"
    "-fplan9-extensions"
    "-fpredictive-commoning"
    "-fpreprocessed"
    "-free"
    "-freorder-blocks-and-partition"
    "-frerun-cse-after-loop"
    "-fsched2-use-superblocks"
    "-fsched-pressure"
    "-fsched-stalled-insns=0"
    "-fselective-scheduling"
    "-fselective-scheduling2"
    "-fsplit-paths"
    "-fsplit-wide-types"
    "-fsso-struct=big-endian"
    "-fsso-struct=little-endian"
    "-fstack-check=generic"
    "-fstack-check=specific"
    "-fstack-limit"
    "-fstack-usage"
    "-fstrict-volatile-bitfields"
    "-ftrack-macro-expansion"
    "-ftrack-macro-expansion=0"
    "-ftrack-macro-expansion=1"
    "-ftrack-macro-expansion=2"
    "-ftree-coalesce-vars"
    "-ftree-cselim"
    "-ftree-dominator-opts"
    "-ftree-loop-distribute-patterns"
    "-ftree-loop-distribution"
    "-ftree-loop-if-convert"
    "-ftree-loop-if-convert-stores"
    "-ftree-loop-ivcanon"
    "-ftree-loop-linear"
    "-ftree-loop-memset"
    "-ftree-parallelize-loops=2"
    "-ftree-parallelize-loops=4"
    "-ftree-pre"
    "-ftree-tail-merge"
    "-funroll-loops-all"
    "-fvar-tracking"
    "-fvar-tracking-assignments"
    "-fwarn-no-abi-tag"
    "-no-sanitize=all"
    "-sanitize=address"
    "-sanitize-recover=integer-divide-by-0"
    "-tfoo"
    "-tls-model=global-dynamic"
    "-gcoff"
    "-gstabs"
    "-gxcoff"
}


proc initialize_override {} {
    proc check_effective_target_lto {} {
        return 0
    }

    proc check_effective_target_label_values {} {
        return 0
    }

    proc check_effective_target_alloca {} {
        return 0
    }
}

proc query_override { test_name flags extra_flags subtest line_num } {
    global unsupported_flags
    global message_tests
    global bad_language_tests

    # Check for unsupported flags
    foreach flag $unsupported_flags {
        foreach test_flag $flags {
            if { [ string trim $test_flag ] == $flag } {
                return "UNSUPPORTED"
            }
        }
    }

    # Check for unsupported flags in the list of extra options
    set extra_flags_list [ split $extra_flags ]
    foreach flag $unsupported_flags {
        foreach test_flag $extra_flags_list {
            if { [ string trim $test_flag ] == $flag } {
                return "UNSUPPORTED"
            }
        }
    }

    # Check if the test checks the compiler messages
    foreach message_test $message_tests {
        if { [ string trim $message_test ] == $test_name } {
            return "UNSUPPORTED"
        }
    }

    # Check to see if the test tests an unsupported language construct / function
    foreach bad_language_test $bad_language_tests {
        if { [ string trim $bad_language_test ] == $test_name } {
            return "UNSUPPORTED"
        }
    }

    return "ABSENT"
}
